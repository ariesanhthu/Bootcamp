"""
Làm thêm tùy chọn:
- https://projecteuler.net/problem=1: 
- https://projecteuler.net/problem=2
- https://projecteuler.net/problem=3
- https://projecteuler.net/problem=4
- https://projecteuler.net/problem=5
- https://projecteuler.net/problem=6
- https://projecteuler.net/problem=7
- https://projecteuler.net/problem=8
- https://projecteuler.net/problem=9
- https://projecteuler.net/problem=10
- https://projecteuler.net/problem=16
"""

import time


class ProjectEuler():
    def __init__(self) -> None:
        pass

    def const_fibonacci(self, n):
        fi_list = [1,2]
        while fi_list[-1] < n+1:
            fi_list.append(fi_list[-1] + fi_list[-2])
        return fi_list[:-1]

    def palindromic_number(self, n):
        n = str(n)
        return n == n[::-1]

    def divisible_by_all(self, number, n = 20):
        result = True
        for i in range(1, n + 1):
            if number % i == 0:
                result = True
            else: 
                result = False
                break
        return result

    def prime_num(self, number):
        result = True
        for i in range(3, number, 2):
            if number % i == 0:
                result = False
        return result

    def problem_(self):
        """
        
        """
        start = time.time()
        result = None



        stop = time.time()
        print("This problem take: ", stop - start)
        return "Answer: {}".format(result)

    def problem_test(self):
        """
        
        """
        start = time.time()
        result = 0
        for i in str(2**1000):
            result += int(i)


        stop = time.time()
        print("This problem take: ", stop - start)
        return "Answer: {}".format(result)

    def problem_1(self):
        """
        If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. 
        Find the sum of all the multiples of 3 or 5 below 1000.
        """
        MAX_RANGE = 1000
        result = 0
        start = time.time()
        for i in range(MAX_RANGE):
            if i % 3 == 0 or i % 5 == 0:
                result += i
        print("This problem take: ", start - time.time())
        return "Answer: {}".format(result)

    def problem_2(self):
        """
        Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        """
        start = time.time()
        result = None

        even_num = [x for x in self.const_fibonacci(4000000) if x % 2 == 0]
        result = 0
        for num in even_num:
            result += num

        stop = time.time()
        print("This problem take: ", stop - start)
        return "Answer: {}".format(result)

    def problem_3(self):
        """
        The prime factors of 13195 are 5, 7, 13 and 29.
        What is the largest prime factor of the number 600851475143 ?
        """
        start = time.time()
        result = None

        # bài này khó đéo biết làm

        stop = time.time()
        print("This problem take: ", stop - start)
        return "Answer: {}".format(result)

    def problem_4(self):
        """
        A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
        Find the largest palindrome made from the product of two 3-digit numbers.
        """
        start = time.time()
        result = None
                # cách này quê mùa vcl
        temp_result = []
        for i in range(100, 1000):
            for j in range(100, 1000):
                if self.palindromic_number(i * j):
                    temp_result.append((i, j, i*j))

        def key(elem):
            return elem[2]

        temp_result.sort(key=key, reverse=True)
        result = temp_result[0]

                # This problem take:  0.5149986743927002
                # Answer: (913, 993, 906609)

        stop = time.time()
        print("This problem take: ", stop - start)
        return "Answer: {}".format(result)

    def problem_5(self):
        """
        2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
        What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
        """
        start = time.time()
        result = None

                # # cách này có ra kết quả nhưng lâu, chạy 20p rồi chưa xong
                # divise = num = step = 20

                # while True:
                #     check = self.divisible_by_all(num, divise)
                #     if check == False:
                #         num += step
                #         print("I = {} --> False, keep looping...".format(num))
                #     elif check == True:
                #         result = num
                #         break


        stop = time.time()
        print("This problem take: ", stop - start)
        return "Answer: {}".format(result)

    def problem_6(self):
        """
        The sum of the squares of the first ten natural numbers is,
        1*1 + 2*2 + 3*3 + ... + 10*10 = 385
        The square of the sum of the first ten natural numbers is,
        (1+2+3+ ... + 10) ^ 2 = 55^2 = 3025
        Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is .
        3025 - 385 = 2640
        Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
        """
        start = time.time()
        result = None

        sum_of_squares = 0
        square_of_sum = 0

        for i in range(1, 100):
            sum_of_squares += i * i
        for i in range(1, 100):
            square_of_sum += i
        square_of_sum *= square_of_sum
        result = square_of_sum - sum_of_squares

        stop = time.time()
        print("This problem take: ", stop - start)
        return "Answer: {}".format(result)

    def problem_7(self):
        """
        By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
        What is the 10 001st prime number?
        """
        start = time.time()
        result = None

        i = 3
        prime_list = [2]

        while len(prime_list) < 10002:
            check = self.prime_num(i)
            if check == True:
                prime_list.append(i)
                print(i, len(prime_list))
            i += 2

#         This problem take:  377.6296534538269
#         Answer: 104743

        # This problem take:  226.3520052433014

        stop = time.time()
        print("This problem take: ", stop - start)
        return "Answer: {}".format(result)

    def problem_8(self):
        """
        The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

                                73167176531330624919225119674426574742355349194934
                                96983520312774506326239578318016984801869478851843
                                85861560789112949495459501737958331952853208805511
                                12540698747158523863050715693290963295227443043557
                                66896648950445244523161731856403098711121722383113
                                62229893423380308135336276614282806444486645238749
                                30358907296290491560440772390713810515859307960866
                                70172427121883998797908792274921901699720888093776
                                65727333001053367881220235421809751254540594752243
                                52584907711670556013604839586446706324415722155397
                                53697817977846174064955149290862569321978468622482
                                83972241375657056057490261407972968652414535100474
                                82166370484403199890008895243450658541227588666881
                                16427171479924442928230863465674813919123162824586
                                17866458359124566529476545682848912883142607690042
                                24219022671055626321111109370544217506941658960408
                                07198403850962455444362981230987879927244284909188
                                84580156166097919133875499200524063689912560717606
                                05886116467109405077541002256983155200055935729725
                                71636269561882670428252483600823257530420752963450

        Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
        """
        start = time.time()
        result = None

        DATA = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
        a = 13
        result = 0

        for char_index in range(len(DATA) - a + 1):
            calc_string = DATA[char_index: char_index+a]
            multiple = 1
            for char in calc_string:
                multiple *= int(char)
            if multiple > result:
                result = multiple
                best_string = calc_string


        stop = time.time()
        print("This problem take: ", stop - start)
        return "Answer: {}, string: {}".format(result, best_string)

    def problem_9(self):
        """
        A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
                                    a2 + b2 = c2
        There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.
        """
        start = time.time()
        result = None

        # result = [[a,b,c] for a in range(1, 1000) for b in range(1, 1000) for c in range(1, 1000) if a + b + c == 1000 and (a*a + b*b == c*c or a*a + c*c == b*b or b*b + c*c == a*a) and a < b < c]
        # This problem take:  76.72856187820435

        # for a in range(1, 1000):
        #     for b in range(1, 1000):
        #         for c in range(1, 1000):
        #             if a + b + c == 1000 and a*a + b*b == c*c and a < b < c:
        #                 result = (a,b,c)
        # This problem take:  80.95431780815125

        for a in range(1, 1000):
            for b in range(1, 1000):
                c = 1000 - a - b
                if a*a + b*b == c*c and a < b < c:
                    result = (a, b,c)
        # This problem take:  0.18700361251831055

        # Answer: [[200, 375, 425]]

        stop = time.time()
        print("This problem take: ", stop - start)
        return "Answer: {}".format(result)

    def problem_10(self):
        """
        The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
        Find the sum of all the primes below two million.
        """
        start = time.time()
        result = None
        
        sum = 2
        for i in range(2,20000):
            check = self.prime_num(i)
            if check == True:
                sum += i
        # This problem take:  11.893032312393188

        result = sum

        # Answer: 21171191

        stop = time.time()
        print("This problem take: ", stop - start)
        return "Answer: {}".format(result)

euler_answer = ProjectEuler()
problem = euler_answer.problem_test()
print(problem)
